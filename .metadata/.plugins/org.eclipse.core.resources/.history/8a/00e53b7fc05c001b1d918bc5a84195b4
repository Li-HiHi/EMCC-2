/*
 * Copyright 2016-2019 NXP
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Copyright 2018 - 2020 HITSIC
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "hitsic_common.h"

/** HITSIC_Module_DRV */
#include "drv_ftfx_flash.hpp"
#include "drv_disp_ssd1306.hpp"
#include "drv_imu_invensense.hpp"
#include "drv_dmadvp.hpp"
#include "drv_cam_zf9v034.hpp"

/** HITSIC_Module_SYS */
#include "sys_pitmgr.hpp"
#include "sys_extint.hpp"
#include "sys_uartmgr.hpp"
#include "cm_backtrace.h"
//#include "easyflash.h"

/** HITSIC_Module_LIB */
#include "lib_graphic.hpp"

/** HITSIC_Module_APP */
#include "app_menu.hpp"
#include "app_svbmp.hpp"

/** FATFS */
#include "ff.h"
#include "sdmmc_config.h"
FATFS fatfs;                                   //逻辑驱动器的工作区

#include "sc_adc.h"
#include "sc_ftm.h"

/** HITSIC_Module_TEST */
#include "drv_cam_zf9v034_test.hpp"
#include "app_menu_test.hpp"
#include "drv_imu_invensense_test.hpp"
#include "sys_fatfs_test.hpp"
#include "sys_fatfs_diskioTest.hpp"

/** SCLIB_TEST */
#include "sc_test.hpp"
/**控制*/
#include "image.h"
#define SampleTimes 10

/**中断服务函数*/
void my_Motor(void *a);//电机中断服务函数
void my_steer(void *a);//舵机中断服务函数

/**电磁控制*/
void LV_Sample(void);
void LV_Get_Val(void);
void swap(uint32_t*a,uint32_t*b);
float get_EM_error(void);
uint8_t channel_name[8]={16,23,17,18,10,11,12,13};
void MENU_DataSetUp(void);


/**全局变量*/
static float Kp_M=0,Ki_M=0,Kp_s=0.0165,Kd_s=0.01,spd_M=20,spd_R=0;
static int foresight=60;
float errorS=0,errorS_1=0,steer_mid=7.8,steer_pwm=7.5,em_error=0;//舵机pid
int oled_sw=0,menu_sw=0;
uint32_t LV_Temp[9][10];
float LV[8];
float AD[8];
float MinLVGot=1;
int delay_sw=0;



cam_zf9v034_configPacket_t cameraCfg;
dmadvp_config_t dmadvpCfg;
dmadvp_handle_t dmadvpHandle;
void CAM_ZF9V034_DmaCallback(edma_handle_t *handle, void *userData, bool transferDone, uint32_t tcds);

inv::i2cInterface_t imu_i2c(nullptr, IMU_INV_I2cRxBlocking, IMU_INV_I2cTxBlocking);
inv::mpu6050_t imu_6050(imu_i2c);

disp_ssd1306_frameBuffer_t dispBuffer;
graphic::bufPrint0608_t<disp_ssd1306_frameBuffer_t> bufPrinter(dispBuffer);

void main(void)
{
    /** 初始化阶段，关闭总中断 */
    HAL_EnterCritical();

    /** BSP（板级支持包）初始化 */
    RTECLK_HsRun_180MHz();
    RTEPIN_Basic();
    RTEPIN_Digital();
    RTEPIN_Analog();
    RTEPIN_LPUART0_DBG();
    RTEPIN_UART0_WLAN();
    RTEPIP_Basic();
    RTEPIP_Device();

    /** 初始化调试组件 */
    DbgConsole_Init(0U, 921600U, kSerialPort_Uart, CLOCK_GetFreq(kCLOCK_CoreSysClk));
    PRINTF("Welcome to HITSIC !\n");
    PRINTF("GCC %d.%d.%d\n", __GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__);
    cm_backtrace_init("HITSIC_MK66F18", "2020-v3.0", "v4.1.1");

    /** 初始化OLED屏幕 */
    DISP_SSD1306_Init();
    extern const uint8_t DISP_image_100thAnniversary[8][128];
    DISP_SSD1306_BufferUpload((uint8_t*) DISP_image_100thAnniversary);
    /** 初始化ftfx_Flash */
    FLASH_SimpleInit();
    /** 初始化PIT中断管理器 */
    pitMgr_t::init();
    /** 初始化I/O中断管理器 */
    extInt_t::init();
    /** 初始化OLED屏幕 */
    /** 初始化菜单 */
    MENU_Init();
    MENU_Data_NvmReadRegionConfig();
    MENU_Data_NvmRead(menu_currRegionNum);

    /** 菜单挂起 */
    MENU_Suspend();
    /** 初始化摄像头 */
    cam_zf9v034_configPacket_t cameraCfg;
        CAM_ZF9V034_GetDefaultConfig(&cameraCfg);                                   //设置摄像头配置
        CAM_ZF9V034_CfgWrite(&cameraCfg);                                   //写入配置
        dmadvp_config_t dmadvpCfg;
        CAM_ZF9V034_GetReceiverConfig(&dmadvpCfg, &cameraCfg);    //生成对应接收器的配置数据，使用此数据初始化接受器并接收图像数据。
        DMADVP_Init(DMADVP0, &dmadvpCfg);
        dmadvp_handle_t dmadvpHandle;
        DMADVP_TransferCreateHandle(&dmadvpHandle, DMADVP0, CAM_ZF9V034_UnitTestDmaCallback);
        uint8_t *imageBuffer0 = new uint8_t[DMADVP0->imgSize];
        uint8_t *imageBuffer1 = new uint8_t[DMADVP0->imgSize];
        //uint8_t *fullBuffer = NULL;
        disp_ssd1306_frameBuffer_t *dispBuffer = new disp_ssd1306_frameBuffer_t;
        DMADVP_TransferSubmitEmptyBuffer(DMADVP0, &dmadvpHandle, imageBuffer0);
        DMADVP_TransferSubmitEmptyBuffer(DMADVP0, &dmadvpHandle, imageBuffer1);
    DMADVP_TransferStart(DMADVP0, &dmadvpHandle);
    /** 初始化IMU */
    //TODO: 在这里初始化IMU（MPU6050）
    /** 菜单就绪 */
    MENU_Resume();

    /** 控制环初始化 */

    //TODO: 在这里初始化控制环




    /** 初始化结束，开启总中断 */
    pitMgr_t::insert(6,1,my_Motor,pitMgr_t::enable);
    pitMgr_t::insert(20,3,my_steer,pitMgr_t::enable);

    HAL_ExitCritical();

    /** 内置DSP函数测试 */
    float f = arm_sin_f32(0.6f);



    //SCADC_GetSample(ADC0,0,12);电磁ad值获取

    while (true)
    {
        if(delay_sw==0)
        {
            DISP_SSD1306_delay_ms(2000);
            delay_sw==1;
        }

         /**电磁处理*/
        LV_Sample();
        LV_Get_Val();
        em_error=get_EM_error();





                /**获取当前速度*/
                spd_R=SCFTM_GetSpeed(FTM0);
                SCFTM_ClearSpeed(FTM0);

               //SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_0,20000,30);
               // SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_1,20000,0);
               // SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_2,20000,30);
               // SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_3,20000,0);

    }
}

void MENU_DataSetUp(void)
{



        MENU_ListInsert(menu_menuRoot, MENU_ItemConstruct(nullType, NULL, "Four-wheeler-4", 0, 0));
        //MENU_ListInsert(menu_menuRoot, MENU_ItemConstruct(nullType, NULL, "EXAMPLE", 0, 0));
        static menu_list_t *PID_sub;
        PID_sub = MENU_ListConstruct("PID", 6, menu_menuRoot);
        MENU_ListInsert(menu_menuRoot, MENU_ItemConstruct(menuType, PID_sub, "PID", 0, 0));
        MENU_ListInsert(PID_sub, MENU_ItemConstruct(varfType, &Kp_M, "Kp_M", 10, menuItem_data_global));
        MENU_ListInsert(PID_sub, MENU_ItemConstruct(varfType, &Ki_M, "Ki_M", 11, menuItem_data_global));
        MENU_ListInsert(PID_sub, MENU_ItemConstruct(varfType, &Kp_s, "Kp_s", 12, menuItem_data_global));
        MENU_ListInsert(PID_sub, MENU_ItemConstruct(varfType, &Kd_s, "Kd_s", 13, menuItem_data_global));
        MENU_ListInsert(PID_sub, MENU_ItemConstruct(varfType, &spd_M, "speed_in", 14, menuItem_data_global));

        static menu_list_t *CAM_sub;
        CAM_sub = MENU_ListConstruct("CAM", 3, menu_menuRoot);
        MENU_ListInsert(menu_menuRoot, MENU_ItemConstruct(menuType, CAM_sub, "CAM", 0, 0));
        MENU_ListInsert(CAM_sub, MENU_ItemConstruct(variType, &foresight, "foresight", 15, menuItem_data_global));
        MENU_ListInsert(CAM_sub, MENU_ItemConstruct(variType, &CAM_yuzhi, "CAM_YUZHI", 17, menuItem_data_global));


        MENU_ListInsert(menu_menuRoot, MENU_ItemConstruct(varfType, &spd_R, "speed_r", 0, menuItem_data_ROFlag | menuItem_data_NoSave | menuItem_data_NoLoad));
        MENU_ListInsert(menu_menuRoot, MENU_ItemConstruct(varfType, &AD[0], "AD[0]",  0, menuItem_data_ROFlag | menuItem_data_NoSave | menuItem_data_NoLoad));
        MENU_ListInsert(menu_menuRoot, MENU_ItemConstruct(varfType, &AD[1], "AD[1]",  0, menuItem_data_ROFlag | menuItem_data_NoSave | menuItem_data_NoLoad));
        MENU_ListInsert(menu_menuRoot, MENU_ItemConstruct(varfType, &AD[2], "AD[2]",  0, menuItem_data_ROFlag | menuItem_data_NoSave | menuItem_data_NoLoad));
        MENU_ListInsert(menu_menuRoot, MENU_ItemConstruct(varfType, &AD[3], "AD[3]",  0, menuItem_data_ROFlag | menuItem_data_NoSave | menuItem_data_NoLoad));
        MENU_ListInsert(menu_menuRoot, MENU_ItemConstruct(varfType, &AD[4], "AD[4]",  0, menuItem_data_ROFlag | menuItem_data_NoSave | menuItem_data_NoLoad));
        MENU_ListInsert(menu_menuRoot, MENU_ItemConstruct(varfType, &AD[5], "AD[5]",  0, menuItem_data_ROFlag | menuItem_data_NoSave | menuItem_data_NoLoad));
        MENU_ListInsert(menu_menuRoot, MENU_ItemConstruct(varfType, &AD[6], "AD[6]",  0, menuItem_data_ROFlag | menuItem_data_NoSave | menuItem_data_NoLoad));
        MENU_ListInsert(menu_menuRoot, MENU_ItemConstruct(varfType, &AD[7], "AD[7]",  0, menuItem_data_ROFlag | menuItem_data_NoSave | menuItem_data_NoLoad));
        MENU_ListInsert(menu_menuRoot, MENU_ItemConstruct(varfType, &em_error, "em_error",  0, menuItem_data_ROFlag | menuItem_data_NoSave | menuItem_data_NoLoad));
    //TODO: 在这里添加子菜单和菜单项
}
void my_Motor(void *a)
{
    if(delay_sw==0)
    {
        SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_0,20000,0);
           SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_1,20000,0);
           SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_2,20000,0);
           SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_3,20000,0);
    }

    else if(AD[0]<20&&AD[6]<20)//保护
    {
        SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_0,20000,0);
           SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_1,20000,0);
           SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_2,20000,0);
           SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_3,20000,0);
    }
    else
    {
        SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_0,20000,spd_M);
        SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_1,20000,0);
        SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_2,20000,spd_M);
        SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_3,20000,0);
    }

    //SCFTM_PWM_ChangeHiRes(FTM3,kFTM_Chnl_7,50,30);

    /**赛场保护*/
  /*  if(get_image_error(60)==0)
    {
        SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_0,20000,0);

        SCFTM_PWM_ChangeHiRes(FTM0,kFTM_Chnl_2,20000,0);

    }*/

}
void my_steer(void *a)
{
    /**舵机限幅*/

    //errorS=get_image_error(foresight ); //读取图像误差
    //errorS=get_EM_error();//读取电磁误差
    errorS=em_error;
    steer_pwm=Kp_s*errorS+Kd_s*(errorS-errorS_1)+steer_mid;//pd控制
    if(steer_pwm<6.8)
        steer_pwm=6.8;
    else if(steer_pwm>8.8)
        steer_pwm=8.8;
    errorS_1=errorS;
    SCFTM_PWM_ChangeHiRes(FTM3,kFTM_Chnl_7,50,steer_pwm);
}
void LV_Sample(void)                             // ad采集函数
{
    for (uint8_t h=0;h<8;h++)
    {
        for(uint8_t i=0;i<=SampleTimes-1;i++)
            {
             /*获取采样初值*/

               LV_Temp[h][i]=SCADC_Sample(ADC0, 0, channel_name[h]);//这里只有两个电感，所以这个只有两行

            }
    }
}

void LV_Get_Val(void)//约0.3mS                  //对采集的值滤波
{
 // 有时会在0-65535(255)间跳动
  for(uint8_t i=0;i<=8;i++)
  {
    for(uint8_t j=0;j<=SampleTimes-1;j++)
    {
         if(LV_Temp[i][j]>500)//剔除毛刺信号
         {
             LV_Temp[i][j]=500;
         }
    }
  }

  //排序
  for(uint8_t k=0;k<=8;k++)
  {
    for(uint8_t i=0;i<=SampleTimes-2;i++)
    {
      for(uint8_t j=i+1;j<=SampleTimes-1;j++)
      {
          if(LV_Temp[k][i]>LV_Temp[k][j])
            swap(&LV_Temp[k][i],&LV_Temp[k][j]);//交换，swap函数自己写
      }
    }
  }

  for(uint8_t k=0;k<=8;k++)
  {
    LV[k]=0;
    for(uint8_t i=3;i<=SampleTimes-4;i++)
    {
         LV[k]+=(float)LV_Temp[k][i];
    }
    LV[k]=LV[k]/(SampleTimes-6);
    if( LV[k] < MinLVGot )
    {
       LV[k] = MinLVGot;
    }
  }

  AD[0] = LV[0];
  AD[1] = LV[1];
  AD[2] = LV[2];
  AD[3] = LV[3];
  AD[4] = LV[4];
  AD[5] = LV[5];
  AD[6] = LV[6];
  AD[7] = LV[7];
  AD[8] = LV[8];
}
void swap(uint32_t *a,uint32_t *b)
    {

    uint32_t temp=*a;
    *a=*b;
    *b=temp;
    }
float get_EM_error(void)
{
    float a;
    a=(float)(LV[6]-LV[0])/(LV[0]+LV[6]);//(LV[0]-LV[6])/(LV[0]+LV[6])
    return a;
}
void CAM_ZF9V034_DmaCallback(edma_handle_t *handle, void *userData, bool transferDone, uint32_t tcds)
{
    //TODO: 补完本回调函数
    THRE();
    head_clear();
    image_main();
    //TODO: 添加图像处理（转向控制也可以写在这里）

}

/**
 * 『灯千结的碎碎念』 Tips by C.M. :
 * 1. 浮点数计算有时（例如除零时）会产生“nan”，即“非数（Not-a-Number）”。
 *      要检测一个变量是否为“nan”，只需判断这个变量是否和自身相等。如果该
 *      变量与自身不相等（表达式“var == var”的值为假），则可判定该浮点数
 *      的值是nan，需要进行车模保护动作。
 * 2. 由于车模震动等因素，IMU可能会断开连接。一旦发现IMU读取失败，应执行车
 *      模保护动作。另外，IMU在单片机复位的瞬间可能正在进行传输，导致时序
 *      紊乱，初始化失败。因此装有IMU的车模复位时必须全车断电。
 * 3. 正常情况下图像帧率为50FPS，即20ms一帧。若摄像头时序紊乱，会导致控制周
 *      期混乱。因而有必要在每次图像采集完成时测量距离上次图像采集完成的时
 *      间间隔，如果明显偏离20ms，须执行车模保护动作。
 * 4. 直立车需特别注意：有时控制输出会使两个电机向相反方向旋转，这在正常运行
 *      中是十分危险的，可能造成车模进入“原地陀螺旋转”的状态，极易损坏车模或
 *      导致人员受伤。在设置电机占空比时务必做好异常保护。
 */


